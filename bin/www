#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app      = require('../app');
var debug    = require('debug')('Tapchan:server');
var http     = require('http');
var socketIO = require('socket.io');
var path     = require('path');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 80);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

let requestHandler = server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

//define socket
// let requestHandler = app.
const io = socketIO(requestHandler);

// Game Server
const TapchanServerEngine = require('../src/server/TapchanServerEngine.js');
const TapchanGameEngine = require('../src/common/TapchanGameEngine.js');
const SimplePhysicsEngine = require('lance-gg').physics.SimplePhysicsEngine;

// Game Instances
const physicsEngine = new SimplePhysicsEngine({
    collisionOptions: {
        COLLISION_DISTANCE: 5,
    }
});
const tapchanGameEngine = new TapchanGameEngine({
    physicsEngine,
    traceLevel: 1,
});
const tapchanServerEngine = new TapchanServerEngine(io, tapchanGameEngine, {
    timeoutInterval: 60 * 5,
    debug: {},
    updateRate: 6,
});

// start the game
tapchanServerEngine.start();